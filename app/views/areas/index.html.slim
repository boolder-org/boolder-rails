/ - set_meta_tags title: t("views.areas.index.metas.title")
/ - set_meta_tags description: t("views.areas.index.metas.description")

/ - set_meta_tags og: { type: "website", image: image_url("hero-homepage.jpg") }

/ - set_meta_tags canonical: areas_url


div class="max-w-7xl mx-auto sm:px-6 lg:px-8 my-8"
  h1 class="text-3xl font-bold mt-8 mb-4" Fontainebleau

  div class="relative"
    div class="flex flex-nowrap overflow-x-auto py-2 space-x-4 px-4 sm:px-0"
      - colors = %w(bg-blue-300 bg-yellow-300 bg-pink-300 bg-green-300).cycle

      = link_to top_areas_level_path, class: "min-w-max" do
        = use_case_card(title: "Secteurs pour bien d√©buter ", color: colors.next) do 
          | 

      = link_to top_areas_dry_fast_path, class: "min-w-max" do
        = use_case_card(title: t("views.areas.index.cards.dry_fast"), color: colors.next) do 
          svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 lg:h-8 lg:w-8 shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor"
            path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
      
      / = link_to top_areas_train_path, class: "min-w-max" do
      /   = use_case_card(title: "Les meilleurs circuits", color: colors.next) do 
      /     | 

      = link_to top_areas_train_path, class: "min-w-max" do
        = use_case_card(title: t("views.areas.index.cards.train_html"), color: colors.next) do 
          | 
          
      div class="pr-16" &nbsp;
    div class="inset-y-0 right-0 flex bg-gradient-to-l from-gray-100 pl-8 pr-8 pointer-events-none absolute"

div class="max-w-7xl mx-auto sm:px-6 lg:px-8 pb-8"
  div class="md:grid md:grid-cols-2 md:gap-16 mb-4"
    div class="col-span-1"
      
      div class="" 

        div class="flex justify-between items-center px-4 sm:px-0" 
          div class=""
            - items = []
            - items << { text: t("views.areas.index.sort_by.problems"), link: areas_path(sort: "all") }
            - 1.upto(8) do |i|
              - items << { text: t("views.areas.index.sort_by.problems_of_level", level: i), link: areas_path(sort: i) }
            - items << { text: t("views.areas.index.sort_by.area_name"), link: areas_path(sort: "name") }
            / = render "areas/index/sort", items: items, align_class: "left-0"

          

        div class="mt-4"
          div
            div class="mt-4 flex flex-col"
              div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8"
                div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8"
                  div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg"
                    table class="min-w-full divide-y divide-gray-300"
                      thead class="bg-gray-50"
                        tr
                          th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6" Secteur
                          th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                            - if params[:sort].to_i.in?(1..8)
                              = t("views.areas.index.problems_of_level_html", level: params[:sort])
                            - else
                              = t("views.areas.index.problems") 
                          th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900" Niveaux
                      tbody class="divide-y divide-gray-200 bg-white"
                        - @areas_with_count.each do |area, count|
                          tr
                            td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6"
                              = link_to area.name, area_path(area)
                            td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"= count
                            td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"
                              - (1..7).each_with_index do |level|
                                span class="ml-1"
                                  - if area.problems.send("level#{level}").count >= 30
                                    = circuit_color_circle_view("green2", level: level, klass: "h-4 w-4 leading-4")
                                  - else
                                    = circuit_color_circle_view("disabled", level: level, klass: "h-4 w-4 leading-4")